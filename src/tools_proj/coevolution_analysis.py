"""
Handles the analysis and workup of coevolution analysis data
"""


def process_evo_coupling_results(
    coupling_results_file: str,
) -> dict[tuple[int, int], float]:
    """
    Process evolutionary coupling results generated by the program: plmc
    Reads in results and reformats to standardise the formatting to match
    other parts of the workflow.

    Residue numbering follows msa numbering.

    Parameters
    ----------
    coupling_results_file: str
        File path of the coupling results generated by plmc.

    Returns
    ----------
    dict[tuple[int, int], float]
        Keys are the residue pair and each value is their associated scores.
        Key formatting is a tuple of 2 integers, residue number 1 and residue number 2
    """
    with open(coupling_results_file, "r", encoding="utf-8") as file:
        raw_couplings = file.read().splitlines()

    # reformat couplings data.
    reformatted_couplings = {}
    for coupling in raw_couplings:
        coupling_parts = coupling.split()
        res1, res2, score = (
            int(coupling_parts[0]),
            int(coupling_parts[2]),
            float(coupling_parts[5]),
        )
        reformatted_couplings[(res1, res2)] = score

    # reorder couplings to show those with the largest (absolute) value first.
    return {
        key: value
        for key, value in sorted(
            reformatted_couplings.items(), key=lambda x: abs(x[1]), reverse=True
        )
    }
